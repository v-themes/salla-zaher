<section class="s-block s-block--questions bg-white">
    {% if component.title %}
    <h2 class="main-title">{{ component.title }}</h2>
    {% endif %}

<div class="max-w-[960px] mx-auto">
          <div class="accordion">
            <dl>
                {% for question in component.q_a %}
                <dt>
                    <a href="#accordion{{ loop.index }}" aria-expanded="false" aria-controls="accordion{{ loop.index }}" class="accordion-title accordionTitle js-accordionTrigger">{{question.question}}</a>
                </dt>
                <dd class="accordion-content accordionItem is-collapsed" id="accordion{{ loop.index }}" aria-hidden="true">
                    <p>{{question.answer}}</p>
                </dd>
                {% endfor %}
            </dl>
          </div>
        </div>
</section>

{% block scripts %}
<script>
(function() {
  var d = document,
    accordionToggles = d.querySelectorAll('.js-accordionTrigger'),
    setAria,
    setAccordionAria,
    switchAccordion,
    touchSupported = ('ontouchstart' in window),
    pointerSupported = ('pointerdown' in window),
    skipClickDelay = function(e) {
      e.preventDefault();
      e.target.click();
    };

  setAriaAttr = function(el, ariaType, newProperty) {
    el.setAttribute(ariaType, newProperty);
  };

  setAccordionAria = function(el1, el2, expanded) {
    switch (expanded) {
      case "true":
        setAriaAttr(el1, 'aria-expanded', 'true');
        setAriaAttr(el2, 'aria-hidden', 'false');
        break;
      case "false":
        setAriaAttr(el1, 'aria-expanded', 'false');
        setAriaAttr(el2, 'aria-hidden', 'true');
        break;
      default:
        break;
    }
  };

  switchAccordion = function(e) {
    e.preventDefault();
    var thisAnswer = e.target.parentNode.nextElementSibling;
    var thisQuestion = e.target;

    // Close all accordion items except the current one
    var accordionItems = d.getElementsByClassName("js-accordionTrigger");
    for (var i = 0; i < accordionItems.length; i++) {
      var itemQuestion = accordionItems[i];
      var itemAnswer = itemQuestion.parentNode.nextElementSibling;

      if (itemQuestion !== thisQuestion && itemQuestion.classList.contains('is-expanded')) {
        itemQuestion.classList.remove('is-expanded');
        itemQuestion.classList.add('is-collapsed');
        itemAnswer.classList.remove('is-expanded');
        itemAnswer.classList.add('is-collapsed');
        itemAnswer.classList.remove('animateIn');
        setAccordionAria(itemQuestion, itemAnswer, 'false');
      }
    }

    // Toggle the current accordion item
    if (thisAnswer.classList.contains('is-collapsed')) {
      setAccordionAria(thisQuestion, thisAnswer, 'true');
    } else {
      setAccordionAria(thisQuestion, thisAnswer, 'false');
    }
    thisQuestion.classList.toggle('is-collapsed');
    thisQuestion.classList.toggle('is-expanded');
    thisAnswer.classList.toggle('is-collapsed');
    thisAnswer.classList.toggle('is-expanded');
    thisAnswer.classList.toggle('animateIn');
  };

  for (var i = 0, len = accordionToggles.length; i < len; i++) {
    if (touchSupported) {
      accordionToggles[i].addEventListener('touchstart', skipClickDelay, false);
    }
    if (pointerSupported) {
      accordionToggles[i].addEventListener('pointerdown', skipClickDelay, false);
    }
    accordionToggles[i].addEventListener('click', switchAccordion, false);
  }
})();
</script>
{% endblock %}