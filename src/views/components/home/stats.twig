{# | Variable | Type | Description |
|--------------------------------|---------|------------------------------------------------------------------------------|
| component | object | Contains merchant settings for fields from twilight.json
`component` section | | component.stats | Stat[] | list of selected stats | #}

<section class="s-block s-block--stat bg-white px-5">
  <h2 class="main-title">{{ component.title }}</h2>

  <div class="container">
    {% for stat in component.stats %}
    <div class="s-block--stat__item">
      <p>{{ stat.title }}</p>
      <h4 class="scroll-counter" data-counter-time="{{ component.counter_time * 1000 }}">{{ stat.value }}</h4>
    </div>
    {% endfor %}
  </div>
</section>

{% block scripts %}
<script>
  document.addEventListener("DOMContentLoaded", function () {
    var statValueCounter = document.querySelectorAll(".s-block--stat .scroll-counter");

    statValueCounter.forEach(function (item) {
      // Add new attributes to the elements with the '.scroll-counter' HTML class
      item.counterAlreadyFired = false;
      item.counterSpeed = item.getAttribute("data-counter-time") / 45;
      item.counterTarget = +item.innerText;
      item.counterCount = 0;
      item.counterStep = item.counterTarget / item.counterSpeed;

      item.updateCounter = function () {
        item.counterCount = item.counterCount + item.counterStep;
        item.innerText = Math.ceil(item.counterCount);

        if (item.counterCount < item.counterTarget) {
          setTimeout(item.updateCounter, item.counterSpeed);
        } else {
          item.innerText = item.counterTarget;
        }
      };
    });

    // Function to determine if an element is visible in the web page
    var isElementVisible = function isElementVisible(el) {
      var scroll = window.scrollY || window.pageYOffset;
      var boundsTop = el.getBoundingClientRect().top + scroll;
      var viewport = {
        top: scroll,
        bottom: scroll + window.innerHeight,
      };
      var bounds = {
        top: boundsTop,
        bottom: boundsTop + el.clientHeight,
      };
      return (
        (bounds.bottom >= viewport.top && bounds.bottom <= viewport.bottom) ||
        (bounds.top <= viewport.bottom && bounds.top >= viewport.top)
      );
    };

    // Funciton that will get fired uppon scrolling
    var handleScroll = function handleScroll() {
      statValueCounter.forEach(function (item, id) {
        if (true === item.counterAlreadyFired) return;
        if (!isElementVisible(item)) return;
        item.updateCounter();
        item.counterAlreadyFired = true;
      });
    };

    // Fire the function on scroll
    window.addEventListener("scroll", handleScroll);
  });
</script>
{% endblock %}